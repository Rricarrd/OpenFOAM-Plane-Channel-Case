/*--------------------------------*- C++ -*----------------------------------*\

| =========                 |                                                 |
| \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox           |
|  \\    /   O peration     | Version:  v2406                                 |

|   \\  /    A nd           | Website:  www.openfoam.com                      |
|    \\/     M anipulation  |                                                 |
\*---------------------------------------------------------------------------*/
FoamFile
{
    version     2.0;
    format      ascii;
    class       dictionary;
    object      functions;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

// Channel wall shear stress
    wallShearStress
    {
        type                wallShearStress;
        libs                ("libfieldFunctionObjects.so");
        log                 yes;
        patches             ( bottom top );
        writePrecision      10;
        writeFields         yes;
        writeToFile         yes;
        executeControl      timeStep;
        executeInterval     1;
        writeControl        writeTime;
        timeStart           0;
    }

    // Skin friction coefficients on the channel walls
    Cf
    {
        type                coded;
        libs                ("libutilityFunctionObjects.so");
        name                Cf;
        timeStart           0;
        writeControl        writeTime;

        codeExecute
        #{
            auto* CfPtr =
                mesh().getObjectPtr<volScalarField>("Cf");

            if (!CfPtr)
            {
                Info<< "Create skin-friction coefficient field" << nl;
                CfPtr = new volScalarField
                (
                    IOobject
                    (
                        "Cf",
                        mesh().time().timeName(),
                        mesh(),
                        IOobject::NO_READ,
                        IOobject::AUTO_WRITE,
                        IOobject::REGISTER
                    ),
                    mesh(),
                    dimless
                );

                regIOobject::store(CfPtr);
            }

            auto& Cf = *CfPtr;

            Info<< "Computing skin-friction coefficient field\n" << endl;

            const auto& tau =
                mesh().lookupObject<volVectorField>("wallShearStress");

            const dimensionedScalar Ubulk(dimVelocity, 17.55);

            Cf = mag(tau.component(0))/(0.5*sqr(Ubulk));
        #};
    }
    
    
    // y+ calculation
    yPlus
    {
        // Mandatory entries
        type            yPlus;
        libs            ("libfieldFunctionObjects.so");

        // Optional (inherited) entries
        writePrecision  10;
        writeToFile     true;
        useUserTime     true;
        region          region0;
        enabled         true;
        log             true;
        timeStart       0;
        executeControl  timeStep;
        executeInterval 1;
        writeControl    writeTime;
        writeInterval   -1;
    }


    // Lambda criterion for turbulence visualization
    Lambda21
    {
        // Mandatory entries
        type            Lambda2;
        libs            ("libfieldFunctionObjects.so");

        // Optional (inherited) entries
        field           U;
        timeStart       0;
        executeControl  timeStep;
        executeInterval 1;
        writeControl    writeTime;
    }

    // Q criterion for turbulence visualization
    Q1
    {
        // Mandatory entries
        type            Q;
        libs            ("libfieldFunctionObjects.so");

        // Optional (inherited) entries
        field           U;
        result          QField;
        timeStart       0;
        executeControl  timeStep;
        executeInterval 1;
        writeControl    writeTime;
    }
